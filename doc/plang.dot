digraph G {
    node [ shape = record, height = .1 ];
    compound=true;
    splines = "ortho";

    start [ label = "P lang file", shape = "ellipse" ]

    subgraph cluster0 {
        node [ style = filled ];
        label = "Parse module"

        parse_import [ label = "Parse import section (module instantiation)" ]

        subgraph cluster1 {
            label = "Parse declaration"

            recursive [ label = "Parse module (recursive call)" ]
            parse_expr [ label = "Parse expression"]
            sort_expr [ label = "Make expression oredered"]

            parse_expr -> sort_expr
        }

        parse_import -> parse_expr [ lhead = cluster1, minlen = 2 ]

        typecheck [ shape = record,
            label = "{ Typecheck
                | -t, --typecheck=TYPE
                    (0), 'none' - Disable typecheck
                    (1), 'on' - Enable typecheck
                    (2), 'soft' - Soft typecheck
                    (3), 'preprocess' - Collect constraints }"]

        parse_expr -> typecheck [ ltail = cluster1, minlen = 2 ]
    }

    start -> parse_import [ lhead = cluster0, minlen = 2 ]

    ir [ label = "IR", shape = "ellipse" ]

    typecheck -> ir [ ltail = cluster0, minlen = 2 ]

    subgraph cluster2 {
        node [ style = filled ];
        label = "Term rewriting"

        clear_identifiers [ shape = record,
            label = "{ Clear identifiers | -k, --keep-names}" ]

        predicates_inst [ label = "Template predicates instantiation" ]
        types_subst [ label = "Types substitution (subtypes, named reference types)" ]

        clear_identifiers -> predicates_inst
        predicates_inst -> types_subst
    }

    module [ label = "Rewritten module", shape = "ellipse" ]

    ir -> predicates_inst [ lhead = cluster2, minlen = 2 ]
    types_subst -> module [ ltail = cluster2, minlen = 2 ]

    subgraph cluster3 {
        node [ style = filled ];
        label = "Research processes"

        semantics [ shape = record,
            label = "{ Semantic conditions generator | -s, --check-semantics }" ]

        verif [ shape = record,
            label = "{ Generator formulas of correctness
                | -e, --verify=TYPE
                (0), 'none' - Do nothing,
                (1), 'nothing' - Just generate conditions,
                (2), 'formulas' - ... and output results,
                (3), 'verbose' - Verbose output.}" ]
    }

    module -> semantics [ lhead = cluster3, minlen = 2 ]

    result_res [ label = "Result of research", shape = "ellipse" ]
    semantics -> result_res [ ltail = cluster3, minlen = 2 ]

    subgraph cluster4 {
        node [ style = filled ];

        trans [ shape = record,
            label = "{ Transformation
                | -T, --transformation=TYPE
                    (1), 'tailrec' - Tail recursion elimination,
                    (2), 'predinline'- Predicate inlining,
                    (3), 'varmerge'- Variable merging,
                    (4), 'simplify' - Simplification,
                    (5), 'all'- All of the above. }" ]

        optim [ shape = record,
            label = "{ Optimization | -O, --optimize }" ]

        cvc3 [ shape = record,
            label = "{ CVC3 solver | -a, --check-validity}" ]

        optim -> cvc3 -> trans
    }

    subgraph cluster5 {
        node [ style = filled ];
        label = "Backend \n -b, --backend=TYPE"

        pvs [ label = "{ PVS | (3), 'pvs'}" ]
        cpp [ label = "{ C++ | (2), 'c' }" ]
        plang [ label = "{ P lang | -pp, --prettyprint=p }" ]
        russel [ label = "{ Russel | (4), 'russell' }" ]
    }

    module -> optim [ lhead = cluster4, minlen = 2 ]
    result_res -> optim [ lhead = cluster4, minlen = 2 ]

    result [ label = "IR of result program", shape = "ellipse" ]

    module -> result
    result_res -> result
    trans -> result [ ltail = cluster4, minlen = 2 ]

    result -> pvs [ lhead = cluster5, minlen = 2 ]
}
